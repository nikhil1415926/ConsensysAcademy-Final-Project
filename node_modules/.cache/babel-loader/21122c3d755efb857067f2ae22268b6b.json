{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n *  SigningKey\n *\n *\n */\n\nvar bytes_1 = require(\"../utils/bytes\");\n\nvar properties_1 = require(\"../utils/properties\");\n\nvar secp256k1_1 = require(\"../utils/secp256k1\");\n\nvar types_1 = require(\"../utils/types\");\n\nvar errors = require(\"../utils/errors\");\n\nvar SigningKey =\n/** @class */\nfunction () {\n  function SigningKey(privateKey) {\n    errors.checkNew(this, SigningKey);\n    var privateKeyBytes = null;\n\n    if (privateKey instanceof types_1.HDNode) {\n      properties_1.defineReadOnly(this, 'mnemonic', privateKey.mnemonic);\n      properties_1.defineReadOnly(this, 'path', privateKey.path);\n      privateKeyBytes = bytes_1.arrayify(privateKey.privateKey);\n    } else {\n      // A lot of common tools do not prefix private keys with a 0x\n      if (typeof privateKey === 'string' && privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {\n        privateKey = '0x' + privateKey;\n      }\n\n      privateKeyBytes = bytes_1.arrayify(privateKey);\n    }\n\n    try {\n      if (privateKeyBytes.length !== 32) {\n        errors.throwError('exactly 32 bytes required', errors.INVALID_ARGUMENT, {\n          arg: 'privateKey',\n          value: '[REDACTED]'\n        });\n      }\n    } catch (error) {\n      var params = {\n        arg: 'privateKey',\n        reason: error.reason,\n        value: '[REDACTED]'\n      };\n\n      if (error.value) {\n        if (typeof error.value.length === 'number') {\n          params.length = error.value.length;\n        }\n\n        params.type = typeof error.value;\n      }\n\n      errors.throwError('invalid private key', error.code, params);\n    }\n\n    properties_1.defineReadOnly(this, 'privateKey', bytes_1.hexlify(privateKeyBytes));\n    properties_1.defineReadOnly(this, 'keyPair', new secp256k1_1.KeyPair(privateKeyBytes));\n    properties_1.defineReadOnly(this, 'publicKey', this.keyPair.publicKey);\n    properties_1.defineReadOnly(this, 'address', secp256k1_1.computeAddress(this.keyPair.publicKey));\n  }\n\n  SigningKey.prototype.signDigest = function (digest) {\n    return this.keyPair.sign(digest);\n  };\n\n  return SigningKey;\n}();\n\nexports.SigningKey = SigningKey;","map":null,"metadata":{},"sourceType":"script"}