{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // See: https://github.com/ethereum/wiki/wiki/JSON-RPC\n\nvar provider_1 = require(\"./provider\");\n\nvar address_1 = require(\"../utils/address\");\n\nvar bytes_1 = require(\"../utils/bytes\");\n\nvar networks_1 = require(\"../utils/networks\");\n\nvar properties_1 = require(\"../utils/properties\");\n\nvar utf8_1 = require(\"../utils/utf8\");\n\nvar web_1 = require(\"../utils/web\");\n\nvar types_1 = require(\"../utils/types\");\n\nvar errors = __importStar(require(\"../utils/errors\"));\n\nfunction timer(timeout) {\n  return new Promise(function (resolve) {\n    setTimeout(function () {\n      resolve();\n    }, timeout);\n  });\n}\n\nfunction getResult(payload) {\n  if (payload.error) {\n    // @TODO: not any\n    var error = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n\n  return payload.result;\n}\n\nfunction getLowerCase(value) {\n  if (value) {\n    return value.toLowerCase();\n  }\n\n  return value;\n}\n\nvar JsonRpcSigner =\n/** @class */\nfunction (_super) {\n  __extends(JsonRpcSigner, _super);\n\n  function JsonRpcSigner(provider, address) {\n    var _this = _super.call(this) || this;\n\n    errors.checkNew(_this, JsonRpcSigner);\n    properties_1.defineReadOnly(_this, 'provider', provider); // Statically attach to a given address\n\n    if (address) {\n      properties_1.defineReadOnly(_this, '_address', address);\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(JsonRpcSigner.prototype, \"address\", {\n    get: function get() {\n      if (!this._address) {\n        errors.throwError('no sync sync address available; use getAddress', errors.UNSUPPORTED_OPERATION, {\n          operation: 'address'\n        });\n      }\n\n      return this._address;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  JsonRpcSigner.prototype.getAddress = function () {\n    if (this._address) {\n      return Promise.resolve(this._address);\n    }\n\n    return this.provider.send('eth_accounts', []).then(function (accounts) {\n      if (accounts.length === 0) {\n        errors.throwError('no accounts', errors.UNSUPPORTED_OPERATION, {\n          operation: 'getAddress'\n        });\n      }\n\n      return address_1.getAddress(accounts[0]);\n    });\n  };\n\n  JsonRpcSigner.prototype.getBalance = function (blockTag) {\n    return this.provider.getBalance(this.getAddress(), blockTag);\n  };\n\n  JsonRpcSigner.prototype.getTransactionCount = function (blockTag) {\n    return this.provider.getTransactionCount(this.getAddress(), blockTag);\n  };\n\n  JsonRpcSigner.prototype.sendTransaction = function (transaction) {\n    var _this = this;\n\n    var tx = properties_1.shallowCopy(transaction);\n\n    if (tx.from == null) {\n      tx.from = this.getAddress().then(function (address) {\n        if (!address) {\n          return null;\n        }\n\n        return address.toLowerCase();\n      });\n    }\n\n    return properties_1.resolveProperties(tx).then(function (tx) {\n      tx = JsonRpcProvider.hexlifyTransaction(tx);\n      return _this.provider.send('eth_sendTransaction', [tx]).then(function (hash) {\n        return web_1.poll(function () {\n          return _this.provider.getTransaction(hash).then(function (tx) {\n            if (tx === null) {\n              return undefined;\n            }\n\n            return _this.provider._wrapTransaction(tx, hash);\n          });\n        }, {\n          onceBlock: _this.provider\n        }).catch(function (error) {\n          error.transactionHash = hash;\n          throw error;\n        });\n      });\n    });\n  };\n\n  JsonRpcSigner.prototype.signMessage = function (message) {\n    var _this = this;\n\n    var data = typeof message === 'string' ? utf8_1.toUtf8Bytes(message) : message;\n    return this.getAddress().then(function (address) {\n      // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n      return _this.provider.send('eth_sign', [address.toLowerCase(), bytes_1.hexlify(data)]);\n    });\n  };\n\n  JsonRpcSigner.prototype.unlock = function (password) {\n    var provider = this.provider;\n    return this.getAddress().then(function (address) {\n      return provider.send('personal_unlockAccount', [address.toLowerCase(), password, null]);\n    });\n  };\n\n  return JsonRpcSigner;\n}(types_1.Signer);\n\nexports.JsonRpcSigner = JsonRpcSigner;\n\nvar JsonRpcProvider =\n/** @class */\nfunction (_super) {\n  __extends(JsonRpcProvider, _super);\n\n  function JsonRpcProvider(url, network) {\n    var _this = this; // One parameter, but it is a network name, so swap it with the URL\n\n\n    if (typeof url === 'string') {\n      if (network === null && networks_1.getNetwork(url)) {\n        network = url;\n        url = null;\n      }\n    }\n\n    if (network) {\n      // The network has been specified explicitly, we can use it\n      _this = _super.call(this, network) || this;\n    } else {\n      // The network is unknown, query the JSON-RPC for it\n      var ready = new Promise(function (resolve, reject) {\n        setTimeout(function () {\n          _this.send('net_version', []).then(function (result) {\n            return resolve(networks_1.getNetwork(parseInt(result)));\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      });\n      _this = _super.call(this, ready) || this;\n    }\n\n    errors.checkNew(_this, JsonRpcProvider); // Default URL\n\n    if (!url) {\n      url = 'http://localhost:8545';\n    }\n\n    if (typeof url === 'string') {\n      _this.connection = {\n        url: url\n      };\n    } else {\n      _this.connection = url;\n    }\n\n    return _this;\n  }\n\n  JsonRpcProvider.prototype.getSigner = function (address) {\n    return new JsonRpcSigner(this, address);\n  };\n\n  JsonRpcProvider.prototype.listAccounts = function () {\n    return this.send('eth_accounts', []).then(function (accounts) {\n      return accounts.map(function (a) {\n        return address_1.getAddress(a);\n      });\n    });\n  };\n\n  JsonRpcProvider.prototype.send = function (method, params) {\n    var request = {\n      method: method,\n      params: params,\n      id: 42,\n      jsonrpc: \"2.0\"\n    };\n    return web_1.fetchJson(this.connection, JSON.stringify(request), getResult);\n  };\n\n  JsonRpcProvider.prototype.perform = function (method, params) {\n    switch (method) {\n      case 'getBlockNumber':\n        return this.send('eth_blockNumber', []);\n\n      case 'getGasPrice':\n        return this.send('eth_gasPrice', []);\n\n      case 'getBalance':\n        return this.send('eth_getBalance', [getLowerCase(params.address), params.blockTag]);\n\n      case 'getTransactionCount':\n        return this.send('eth_getTransactionCount', [getLowerCase(params.address), params.blockTag]);\n\n      case 'getCode':\n        return this.send('eth_getCode', [getLowerCase(params.address), params.blockTag]);\n\n      case 'getStorageAt':\n        return this.send('eth_getStorageAt', [getLowerCase(params.address), params.position, params.blockTag]);\n\n      case 'sendTransaction':\n        return this.send('eth_sendRawTransaction', [params.signedTransaction]);\n\n      case 'getBlock':\n        if (params.blockTag) {\n          return this.send('eth_getBlockByNumber', [params.blockTag, false]);\n        } else if (params.blockHash) {\n          return this.send('eth_getBlockByHash', [params.blockHash, false]);\n        }\n\n        return Promise.reject(new Error('invalid block tag or block hash'));\n\n      case 'getTransaction':\n        return this.send('eth_getTransactionByHash', [params.transactionHash]);\n\n      case 'getTransactionReceipt':\n        return this.send('eth_getTransactionReceipt', [params.transactionHash]);\n\n      case 'call':\n        return this.send('eth_call', [JsonRpcProvider.hexlifyTransaction(params.transaction), 'latest']);\n\n      case 'estimateGas':\n        return this.send('eth_estimateGas', [JsonRpcProvider.hexlifyTransaction(params.transaction)]);\n\n      case 'getLogs':\n        if (params.filter && params.filter.address != null) {\n          params.filter.address = getLowerCase(params.filter.address);\n        }\n\n        return this.send('eth_getLogs', [params.filter]);\n\n      default:\n        break;\n    }\n\n    errors.throwError(method + ' not implemented', errors.NOT_IMPLEMENTED, {\n      operation: method\n    });\n    return null;\n  };\n\n  JsonRpcProvider.prototype._startPending = function () {\n    if (this._pendingFilter != null) {\n      return;\n    }\n\n    var self = this;\n    var pendingFilter = this.send('eth_newPendingTransactionFilter', []);\n    this._pendingFilter = pendingFilter;\n    pendingFilter.then(function (filterId) {\n      function poll() {\n        self.send('eth_getFilterChanges', [filterId]).then(function (hashes) {\n          if (self._pendingFilter != pendingFilter) {\n            return null;\n          }\n\n          var seq = Promise.resolve();\n          hashes.forEach(function (hash) {\n            self._emitted['t:' + hash.toLowerCase()] = 'pending';\n            seq = seq.then(function () {\n              return self.getTransaction(hash).then(function (tx) {\n                self.emit('pending', tx);\n                return null;\n              });\n            });\n          });\n          return seq.then(function () {\n            return timer(1000);\n          });\n        }).then(function () {\n          if (self._pendingFilter != pendingFilter) {\n            self.send('eth_uninstallFilter', [filterId]);\n            return;\n          }\n\n          setTimeout(function () {\n            poll();\n          }, 0);\n          return null;\n        }).catch(function (error) {});\n      }\n\n      poll();\n      return filterId;\n    }).catch(function (error) {});\n  };\n\n  JsonRpcProvider.prototype._stopPending = function () {\n    this._pendingFilter = null;\n  }; // Convert an ethers.js transaction into a JSON-RPC transaction\n  //  - gasLimit => gas\n  //  - All values hexlified\n  //  - All numeric values zero-striped\n  // @TODO: Not any, a dictionary of string to strings\n\n\n  JsonRpcProvider.hexlifyTransaction = function (transaction) {\n    var result = {}; // Some nodes (INFURA ropsten; INFURA mainnet is fine) don't like extra zeros.\n\n    ['gasLimit', 'gasPrice', 'nonce', 'value'].forEach(function (key) {\n      if (transaction[key] == null) {\n        return;\n      }\n\n      var value = bytes_1.hexStripZeros(bytes_1.hexlify(transaction[key]));\n\n      if (key === 'gasLimit') {\n        key = 'gas';\n      }\n\n      result[key] = value;\n    });\n    ['from', 'to', 'data'].forEach(function (key) {\n      if (transaction[key] == null) {\n        return;\n      }\n\n      result[key] = bytes_1.hexlify(transaction[key]);\n    });\n    return result;\n  };\n\n  return JsonRpcProvider;\n}(provider_1.Provider);\n\nexports.JsonRpcProvider = JsonRpcProvider;","map":null,"metadata":{},"sourceType":"script"}