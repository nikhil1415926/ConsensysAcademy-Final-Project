{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar net_1 = __importDefault(require(\"net\"));\n\nvar json_rpc_provider_1 = require(\"./json-rpc-provider\");\n\nvar properties_1 = require(\"../utils/properties\");\n\nvar errors = __importStar(require(\"../utils/errors\"));\n\nvar IpcProvider =\n/** @class */\nfunction (_super) {\n  __extends(IpcProvider, _super);\n\n  function IpcProvider(path, network) {\n    var _this = this;\n\n    if (path == null) {\n      errors.throwError('missing path', errors.MISSING_ARGUMENT, {\n        arg: 'path'\n      });\n    }\n\n    _this = _super.call(this, 'ipc://' + path, network) || this;\n    errors.checkNew(_this, IpcProvider);\n    properties_1.defineReadOnly(_this, 'path', path);\n    return _this;\n  } // @TODO: Create a connection to the IPC path and use filters instead of polling for block\n\n\n  IpcProvider.prototype.send = function (method, params) {\n    // This method is very simple right now. We create a new socket\n    // connection each time, which may be slower, but the main\n    // advantage we are aiming for now is security. This simplifies\n    // multiplexing requests (since we do not need to multiplex).\n    var _this = this;\n\n    var payload = JSON.stringify({\n      method: method,\n      params: params,\n      id: 42,\n      jsonrpc: \"2.0\"\n    });\n    return new Promise(function (resolve, reject) {\n      var stream = net_1.default.connect(_this.path);\n      stream.on('data', function (data) {\n        try {\n          resolve(JSON.parse(data.toString('utf8')).result); // @TODO: Better pull apart the error\n\n          stream.destroy();\n        } catch (error) {\n          reject(error);\n          stream.destroy();\n        }\n      });\n      stream.on('end', function () {\n        stream.destroy();\n      });\n      stream.on('error', function (error) {\n        reject(error);\n        stream.destroy();\n      });\n      stream.write(payload);\n      stream.end();\n    });\n  };\n\n  return IpcProvider;\n}(json_rpc_provider_1.JsonRpcProvider);\n\nexports.IpcProvider = IpcProvider;","map":null,"metadata":{},"sourceType":"script"}