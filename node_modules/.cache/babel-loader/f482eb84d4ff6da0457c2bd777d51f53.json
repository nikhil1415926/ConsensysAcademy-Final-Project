{"ast":null,"code":"'use strict';\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar errors = __importStar(require(\"../utils/errors\"));\n\nvar homestead = {\n  chainId: 1,\n  ensAddress: \"0x314159265dd8dbb310642f98f50c066173c1259b\",\n  name: \"homestead\"\n};\nvar ropsten = {\n  chainId: 3,\n  ensAddress: \"0x112234455c3a32fd11230c42e7bccd4a84e02010\",\n  name: \"ropsten\"\n};\nvar networks = {\n  unspecified: {\n    chainId: 0\n  },\n  homestead: homestead,\n  mainnet: homestead,\n  morden: {\n    chainId: 2\n  },\n  ropsten: ropsten,\n  testnet: ropsten,\n  rinkeby: {\n    chainId: 4,\n    ensAddress: \"0xe7410170f87102DF0055eB195163A03B7F2Bff4A\"\n  },\n  kovan: {\n    chainId: 42\n  },\n  classic: {\n    chainId: 61\n  }\n};\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */\n\nfunction getNetwork(network) {\n  // No network (null) or unspecified (chainId = 0)\n  if (!network) {\n    return null;\n  }\n\n  if (typeof network === 'number') {\n    for (var name in networks) {\n      var n_1 = networks[name];\n\n      if (n_1.chainId === network) {\n        return {\n          name: name,\n          chainId: n_1.chainId,\n          ensAddress: n_1.ensAddress\n        };\n      }\n    }\n\n    return {\n      chainId: network,\n      name: 'unknown'\n    };\n  }\n\n  if (typeof network === 'string') {\n    var n_2 = networks[network];\n\n    if (n_2 == null) {\n      return null;\n    }\n\n    return {\n      name: network,\n      chainId: n_2.chainId,\n      ensAddress: n_2.ensAddress\n    };\n  }\n\n  var n = networks[network.name]; // Not a standard network; check that it is a valid network in general\n\n  if (!n) {\n    if (typeof n.chainId !== 'number') {\n      errors.throwError('invalid network chainId', errors.INVALID_ARGUMENT, {\n        arg: 'network',\n        value: network\n      });\n    }\n\n    return network;\n  } // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n\n\n  if (network.chainId !== 0 && network.chainId !== n.chainId) {\n    errors.throwError('network chainId mismatch', errors.INVALID_ARGUMENT, {\n      arg: 'network',\n      value: network\n    });\n  } // Standard Network\n\n\n  return {\n    name: network.name,\n    chainId: n.chainId,\n    ensAddress: n.ensAddress\n  };\n}\n\nexports.getNetwork = getNetwork;","map":null,"metadata":{},"sourceType":"script"}