{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar provider_1 = require(\"./provider\");\n\nvar bytes_1 = require(\"../utils/bytes\");\n\nvar properties_1 = require(\"../utils/properties\");\n\nvar web_1 = require(\"../utils/web\");\n\nvar errors = __importStar(require(\"../utils/errors\")); // The transaction has already been sanitized by the calls in Provider\n\n\nfunction getTransactionString(transaction) {\n  var result = [];\n\n  for (var key in transaction) {\n    if (transaction[key] == null) {\n      continue;\n    }\n\n    var value = bytes_1.hexlify(transaction[key]);\n\n    if ({\n      gasLimit: true,\n      gasPrice: true,\n      nonce: true,\n      value: true\n    }[key]) {\n      value = bytes_1.hexStripZeros(value);\n    }\n\n    result.push(key + '=' + value);\n  }\n\n  return result.join('&');\n}\n\nfunction getResult(result) {\n  // getLogs, getHistory have weird success responses\n  if (result.status == 0 && (result.message === 'No records found' || result.message === 'No transactions found')) {\n    return result.result;\n  }\n\n  if (result.status != 1 || result.message != 'OK') {\n    // @TODO: not any\n    var error = new Error('invalid response');\n    error.result = JSON.stringify(result);\n    throw error;\n  }\n\n  return result.result;\n}\n\nfunction getJsonResult(result) {\n  if (result.jsonrpc != '2.0') {\n    // @TODO: not any\n    var error = new Error('invalid response');\n    error.result = JSON.stringify(result);\n    throw error;\n  }\n\n  if (result.error) {\n    // @TODO: not any\n    var error = new Error(result.error.message || 'unknown error');\n\n    if (result.error.code) {\n      error.code = result.error.code;\n    }\n\n    if (result.error.data) {\n      error.data = result.error.data;\n    }\n\n    throw error;\n  }\n\n  return result.result;\n} // The blockTag was normalized as a string by the Provider pre-perform operations\n\n\nfunction checkLogTag(blockTag) {\n  if (blockTag === 'pending') {\n    throw new Error('pending not supported');\n  }\n\n  if (blockTag === 'latest') {\n    return blockTag;\n  }\n\n  return parseInt(blockTag.substring(2), 16);\n}\n\nvar EtherscanProvider =\n/** @class */\nfunction (_super) {\n  __extends(EtherscanProvider, _super);\n\n  function EtherscanProvider(network, apiKey) {\n    var _this = _super.call(this, network) || this;\n\n    errors.checkNew(_this, EtherscanProvider);\n    var name = 'invalid';\n\n    if (_this.network) {\n      name = _this.network.name;\n    }\n\n    var baseUrl = null;\n\n    switch (name) {\n      case 'homestead':\n        baseUrl = 'https://api.etherscan.io';\n        break;\n\n      case 'ropsten':\n        baseUrl = 'https://api-ropsten.etherscan.io';\n        break;\n\n      case 'rinkeby':\n        baseUrl = 'https://api-rinkeby.etherscan.io';\n        break;\n\n      case 'kovan':\n        baseUrl = 'https://api-kovan.etherscan.io';\n        break;\n\n      default:\n        throw new Error('unsupported network');\n    }\n\n    properties_1.defineReadOnly(_this, 'baseUrl', baseUrl);\n    properties_1.defineReadOnly(_this, 'apiKey', apiKey);\n    return _this;\n  }\n\n  EtherscanProvider.prototype.perform = function (method, params) {\n    //if (!params) { params = {}; }\n    var url = this.baseUrl;\n    var apiKey = '';\n\n    if (this.apiKey) {\n      apiKey += '&apikey=' + this.apiKey;\n    }\n\n    switch (method) {\n      case 'getBlockNumber':\n        url += '/api?module=proxy&action=eth_blockNumber' + apiKey;\n        return web_1.fetchJson(url, null, getJsonResult);\n\n      case 'getGasPrice':\n        url += '/api?module=proxy&action=eth_gasPrice' + apiKey;\n        return web_1.fetchJson(url, null, getJsonResult);\n\n      case 'getBalance':\n        // Returns base-10 result\n        url += '/api?module=account&action=balance&address=' + params.address;\n        url += '&tag=' + params.blockTag + apiKey;\n        return web_1.fetchJson(url, null, getResult);\n\n      case 'getTransactionCount':\n        url += '/api?module=proxy&action=eth_getTransactionCount&address=' + params.address;\n        url += '&tag=' + params.blockTag + apiKey;\n        return web_1.fetchJson(url, null, getJsonResult);\n\n      case 'getCode':\n        url += '/api?module=proxy&action=eth_getCode&address=' + params.address;\n        url += '&tag=' + params.blockTag + apiKey;\n        return web_1.fetchJson(url, null, getJsonResult);\n\n      case 'getStorageAt':\n        url += '/api?module=proxy&action=eth_getStorageAt&address=' + params.address;\n        url += '&position=' + params.position;\n        url += '&tag=' + params.blockTag + apiKey;\n        return web_1.fetchJson(url, null, getJsonResult);\n\n      case 'sendTransaction':\n        url += '/api?module=proxy&action=eth_sendRawTransaction&hex=' + params.signedTransaction;\n        url += apiKey;\n        return web_1.fetchJson(url, null, getJsonResult);\n\n      case 'getBlock':\n        if (params.blockTag) {\n          url += '/api?module=proxy&action=eth_getBlockByNumber&tag=' + params.blockTag;\n          url += '&boolean=false';\n          url += apiKey;\n          return web_1.fetchJson(url, null, getJsonResult);\n        }\n\n        throw new Error('getBlock by blockHash not implmeneted');\n\n      case 'getTransaction':\n        url += '/api?module=proxy&action=eth_getTransactionByHash&txhash=' + params.transactionHash;\n        url += apiKey;\n        return web_1.fetchJson(url, null, getJsonResult);\n\n      case 'getTransactionReceipt':\n        url += '/api?module=proxy&action=eth_getTransactionReceipt&txhash=' + params.transactionHash;\n        url += apiKey;\n        return web_1.fetchJson(url, null, getJsonResult);\n\n      case 'call':\n        var transaction = getTransactionString(params.transaction);\n\n        if (transaction) {\n          transaction = '&' + transaction;\n        }\n\n        url += '/api?module=proxy&action=eth_call' + transaction;\n        url += apiKey;\n        return web_1.fetchJson(url, null, getJsonResult);\n\n      case 'estimateGas':\n        var transaction = getTransactionString(params.transaction);\n\n        if (transaction) {\n          transaction = '&' + transaction;\n        }\n\n        url += '/api?module=proxy&action=eth_estimateGas&' + transaction;\n        url += apiKey;\n        return web_1.fetchJson(url, null, getJsonResult);\n\n      case 'getLogs':\n        url += '/api?module=logs&action=getLogs';\n\n        try {\n          if (params.filter.fromBlock) {\n            url += '&fromBlock=' + checkLogTag(params.filter.fromBlock);\n          }\n\n          if (params.filter.toBlock) {\n            url += '&toBlock=' + checkLogTag(params.filter.toBlock);\n          }\n\n          if (params.filter.address) {\n            url += '&address=' + params.filter.address;\n          } // @TODO: We can handle slightly more complicated logs using the logs API\n\n\n          if (params.filter.topics && params.filter.topics.length > 0) {\n            if (params.filter.topics.length > 1) {\n              throw new Error('unsupported topic format');\n            }\n\n            var topic0 = params.filter.topics[0];\n\n            if (typeof topic0 !== 'string' || topic0.length !== 66) {\n              throw new Error('unsupported topic0 format');\n            }\n\n            url += '&topic0=' + topic0;\n          }\n        } catch (error) {\n          return Promise.reject(error);\n        }\n\n        url += apiKey;\n        var self = this;\n        return web_1.fetchJson(url, null, getResult).then(function (logs) {\n          var txs = {};\n          var seq = Promise.resolve();\n          logs.forEach(function (log) {\n            seq = seq.then(function () {\n              if (log.blockHash != null) {\n                return null;\n              }\n\n              log.blockHash = txs[log.transactionHash];\n\n              if (log.blockHash == null) {\n                return self.getTransaction(log.transactionHash).then(function (tx) {\n                  txs[log.transactionHash] = tx.blockHash;\n                  log.blockHash = tx.blockHash;\n                  return null;\n                });\n              }\n\n              return null;\n            });\n          });\n          return seq.then(function () {\n            return logs;\n          });\n        });\n\n      case 'getEtherPrice':\n        if (this.network.name !== 'homestead') {\n          return Promise.resolve(0.0);\n        }\n\n        url += '/api?module=stats&action=ethprice';\n        url += apiKey;\n        return web_1.fetchJson(url, null, getResult).then(function (result) {\n          return parseFloat(result.ethusd);\n        });\n\n      default:\n        break;\n    }\n\n    return _super.prototype.perform.call(this, method, params);\n  }; // @TODO: Allow startBlock and endBlock to be Promises\n\n\n  EtherscanProvider.prototype.getHistory = function (addressOrName, startBlock, endBlock) {\n    var url = this.baseUrl;\n    var apiKey = '';\n\n    if (this.apiKey) {\n      apiKey += '&apikey=' + this.apiKey;\n    }\n\n    if (startBlock == null) {\n      startBlock = 0;\n    }\n\n    if (endBlock == null) {\n      endBlock = 99999999;\n    }\n\n    return this.resolveName(addressOrName).then(function (address) {\n      url += '/api?module=account&action=txlist&address=' + address;\n      url += '&startblock=' + startBlock;\n      url += '&endblock=' + endBlock;\n      url += '&sort=asc' + apiKey;\n      return web_1.fetchJson(url, null, getResult).then(function (result) {\n        var output = [];\n        result.forEach(function (tx) {\n          ['contractAddress', 'to'].forEach(function (key) {\n            if (tx[key] == '') {\n              delete tx[key];\n            }\n          });\n\n          if (tx.creates == null && tx.contractAddress != null) {\n            tx.creates = tx.contractAddress;\n          }\n\n          var item = provider_1.Provider.checkTransactionResponse(tx);\n\n          if (tx.timeStamp) {\n            item.timestamp = parseInt(tx.timeStamp);\n          }\n\n          output.push(item);\n        });\n        return output;\n      });\n    });\n  };\n\n  return EtherscanProvider;\n}(provider_1.Provider);\n\nexports.EtherscanProvider = EtherscanProvider;","map":null,"metadata":{},"sourceType":"script"}